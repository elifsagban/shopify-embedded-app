{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Card, ResourceList, Stack, TextStyle, Thumbnail } from '@shopify/polaris';\nimport store from 'store-js';\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport { Context } from '@shopify/app-bridge-react';\nconst GET_PRODUCTS_BY_ID = gql`\n  query getProducts($ids: [ID!]!){\n    nodes(ids: $ids) {\n        ... on Product {\n            title\n            handle\n            descriptionHtml\n            id\n            images(first: 1) {\n                edges {\n                    node {\n                        originalSrc\n                        altText\n                    }\n                }\n            }\n            variants(first: 1) {\n                edges {\n                    node {\n                        price\n                        id\n                    }\n                }\n            }\n        }\n    }  \n  }\n  `;\n\nclass ResourceListWithProducts extends React.Component {\n  render() {\n    const app = this.context;\n\n    const redirectToProduct = () => {\n      const redirect = Redirect.create(app);\n      redirect.dispatch(Redirect.Action.APP, '/edit-products');\n    };\n\n    const twoWeeksFromNow = new Date(Date.now() + 12096e5).toDateString();\n    return __jsx(Query, {\n      query: GET_PRODUCTS_BY_ID,\n      variables: {\n        ids: store.get('ids')\n      }\n    }, ({\n      data,\n      loading,\n      error\n    }) => {\n      if (loading) {\n        return __jsx(\"div\", null, \"Loading\\u2026\");\n      }\n\n      if (error) {\n        return __jsx(\"div\", null, error.message);\n      }\n\n      console.log(data);\n      return __jsx(Card, null, __jsx(ResourceList, {\n        showHeader: true,\n        resourceName: {\n          singular: 'Product',\n          plural: 'Products'\n        },\n        items: data.nodes,\n        renderItem: item => {\n          const media = __jsx(Thumbnail, {\n            source: item.images.edges[0] ? item.images.edges[0].node.originalSrc : '',\n            alt: item.images.edges[0] ? item.images.edges[0].node.altText : ''\n          });\n\n          const price = item.variants.edges[0].node.price;\n          return __jsx(ResourceList.Item, {\n            id: item.id,\n            media: media,\n            accessibilityLabel: `View details for ${item.title}`,\n            onClick: () => {\n              store.set('item', item);\n              redirectToProduct();\n            }\n          }, __jsx(Stack, null, __jsx(Stack.Item, {\n            fill: true\n          }, __jsx(\"h3\", null, __jsx(TextStyle, {\n            variation: \"strong\"\n          }, item.title))), __jsx(Stack.Item, null, __jsx(\"p\", null, \"$\", price)), __jsx(Stack.Item, null, __jsx(\"p\", null, \"Expires on \", twoWeeksFromNow))));\n        }\n      }));\n    });\n  }\n\n}\n\n_defineProperty(ResourceListWithProducts, \"contextType\", Context);\n\nexport default ResourceListWithProducts;","map":{"version":3,"sources":["C:/Users/elifs_su25o72/Desktop/sample-embedded-app/components/ResourceList.js"],"names":["gql","Query","Card","ResourceList","Stack","TextStyle","Thumbnail","store","Redirect","Context","GET_PRODUCTS_BY_ID","ResourceListWithProducts","React","Component","render","app","context","redirectToProduct","redirect","create","dispatch","Action","APP","twoWeeksFromNow","Date","now","toDateString","ids","get","data","loading","error","message","console","log","singular","plural","nodes","item","media","images","edges","node","originalSrc","altText","price","variants","id","title","set"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\r\nimport { Query } from 'react-apollo';\r\nimport { \r\n  Card,\r\n  ResourceList,\r\n  Stack,\r\n  TextStyle,\r\n  Thumbnail,\r\n} from '@shopify/polaris';\r\nimport store from 'store-js';\r\nimport { Redirect } from '@shopify/app-bridge/actions';\r\nimport { Context } from '@shopify/app-bridge-react';\r\n\r\nconst GET_PRODUCTS_BY_ID = gql`\r\n  query getProducts($ids: [ID!]!){\r\n    nodes(ids: $ids) {\r\n        ... on Product {\r\n            title\r\n            handle\r\n            descriptionHtml\r\n            id\r\n            images(first: 1) {\r\n                edges {\r\n                    node {\r\n                        originalSrc\r\n                        altText\r\n                    }\r\n                }\r\n            }\r\n            variants(first: 1) {\r\n                edges {\r\n                    node {\r\n                        price\r\n                        id\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }  \r\n  }\r\n  `;\r\n\r\n  class ResourceListWithProducts extends React.Component {\r\n\r\n    static contextType = Context;\r\n\r\n    render() {\r\n\r\n      const app = this.context;\r\n      const redirectToProduct = () => {\r\n        const redirect = Redirect.create(app);\r\n        redirect.dispatch(\r\n          Redirect.Action.APP,\r\n          '/edit-products',\r\n        );\r\n      };\r\n\r\n      const twoWeeksFromNow = new Date(Date.now() + 12096e5).toDateString();\r\n      return (\r\n        <Query query={GET_PRODUCTS_BY_ID} variables={{ ids: store.get('ids') }}>\r\n          {({ data, loading, error }) => {\r\n            if (loading) { return <div>Loadingâ€¦</div>; }\r\n            if (error) { return <div>{error.message}</div>; }\r\n            console.log(data);\r\n            return (\r\n              <Card>\r\n                <ResourceList \r\n                  showHeader\r\n                  resourceName={{ singular: 'Product', plural: 'Products' }}\r\n                  items={data.nodes}\r\n                  renderItem={item => {\r\n                    const media = (\r\n                      <Thumbnail\r\n                        source={\r\n                          item.images.edges[0]\r\n                            ? item.images.edges[0].node.originalSrc\r\n                            : ''\r\n                        }\r\n                        alt={\r\n                          item.images.edges[0]\r\n                            ? item.images.edges[0].node.altText\r\n                            : ''\r\n                        }\r\n                      />\r\n                    );\r\n                    const price = item.variants.edges[0].node.price;\r\n                    return(\r\n                      <ResourceList.Item\r\n                        id={item.id}\r\n                        media={media}\r\n                        accessibilityLabel={`View details for ${item.title}`}\r\n                        onClick={() => {\r\n                          store.set('item', item);\r\n                          redirectToProduct();\r\n                        }}\r\n                      >\r\n                        <Stack>\r\n                          <Stack.Item fill>\r\n                            <h3>\r\n                              <TextStyle variation=\"strong\">\r\n                                {item.title}\r\n                              </TextStyle>\r\n                            </h3>\r\n                          </Stack.Item>\r\n                          <Stack.Item>\r\n                            <p>${price}</p>\r\n                          </Stack.Item>\r\n                          <Stack.Item>\r\n                            <p>Expires on {twoWeeksFromNow}</p>\r\n                          </Stack.Item>\r\n                        </Stack>\r\n                      </ResourceList.Item>\r\n                    );\r\n                  }}\r\n                />\r\n              </Card>\r\n            );\r\n          }}\r\n        </Query>\r\n      );\r\n    }\r\n  }\r\n\r\n  export default ResourceListWithProducts;"]},"metadata":{},"sourceType":"module"}